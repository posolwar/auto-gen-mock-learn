// Code generated by mockery v2.20.0. DO NOT EDIT.

package repositories

import (
	models "mockery_test/internal/models"

	mock "github.com/stretchr/testify/mock"
)

// MockProductRepositoryInterface is an autogenerated mock type for the ProductRepositoryInterface type
type MockProductRepositoryInterface struct {
	mock.Mock
}

type MockProductRepositoryInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProductRepositoryInterface) EXPECT() *MockProductRepositoryInterface_Expecter {
	return &MockProductRepositoryInterface_Expecter{mock: &_m.Mock}
}

// Add provides a mock function with given fields: product
func (_m *MockProductRepositoryInterface) Add(product models.Product) error {
	ret := _m.Called(product)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.Product) error); ok {
		r0 = rf(product)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockProductRepositoryInterface_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type MockProductRepositoryInterface_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - product models.Product
func (_e *MockProductRepositoryInterface_Expecter) Add(product interface{}) *MockProductRepositoryInterface_Add_Call {
	return &MockProductRepositoryInterface_Add_Call{Call: _e.mock.On("Add", product)}
}

func (_c *MockProductRepositoryInterface_Add_Call) Run(run func(product models.Product)) *MockProductRepositoryInterface_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.Product))
	})
	return _c
}

func (_c *MockProductRepositoryInterface_Add_Call) Return(_a0 error) *MockProductRepositoryInterface_Add_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProductRepositoryInterface_Add_Call) RunAndReturn(run func(models.Product) error) *MockProductRepositoryInterface_Add_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: productID
func (_m *MockProductRepositoryInterface) Get(productID string) (models.Product, error) {
	ret := _m.Called(productID)

	var r0 models.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (models.Product, error)); ok {
		return rf(productID)
	}
	if rf, ok := ret.Get(0).(func(string) models.Product); ok {
		r0 = rf(productID)
	} else {
		r0 = ret.Get(0).(models.Product)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(productID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProductRepositoryInterface_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockProductRepositoryInterface_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - productID string
func (_e *MockProductRepositoryInterface_Expecter) Get(productID interface{}) *MockProductRepositoryInterface_Get_Call {
	return &MockProductRepositoryInterface_Get_Call{Call: _e.mock.On("Get", productID)}
}

func (_c *MockProductRepositoryInterface_Get_Call) Run(run func(productID string)) *MockProductRepositoryInterface_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockProductRepositoryInterface_Get_Call) Return(_a0 models.Product, _a1 error) *MockProductRepositoryInterface_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProductRepositoryInterface_Get_Call) RunAndReturn(run func(string) (models.Product, error)) *MockProductRepositoryInterface_Get_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockProductRepositoryInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockProductRepositoryInterface creates a new instance of MockProductRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockProductRepositoryInterface(t mockConstructorTestingTNewMockProductRepositoryInterface) *MockProductRepositoryInterface {
	mock := &MockProductRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
